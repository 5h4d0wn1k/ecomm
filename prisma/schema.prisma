generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Required for creating a User: id, name, email, image, cart (optional JSON string)
model User {
    id    String @id
    name  String
    email String
    image String
    cart  Json   @default("{}")

    // Relations
    ratings        Rating[]
    Address        Address[]
    store          Store?
    buyerOrders    Order[]         @relation("BuyerRelation")
    returnRequests ReturnRequest[]
    refunds        Refund[]
    replacements   Replacement[]
}

// Required for creating a Product: name, description, mrp, price, images, category, storeId
model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    mrp         Float
    price       Float
    images      String[]
    category    String
    inStock     Boolean  @default(true)
    storeId     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
    orderItems OrderItem[]
    rating     Rating[]
}

enum OrderStatus {
    ORDER_PLACED
    PAYMENT_PENDING
    PAYMENT_FAILED
    PROCESSING
    SHIPPED
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
    REFUNDED
    RETURN_REQUESTED
    RETURN_APPROVED
    RETURN_REJECTED
    REPLACEMENT_REQUESTED
    REPLACEMENT_APPROVED
    REPLACEMENT_REJECTED
    RETURNED
    REPLACED
}

enum PaymentMethod {
    COD
    STRIPE
    RAZORPAY
}

// Required for creating an Order: total, userId, storeId, addressId, isPaid, paymentMethod, isCouponUsed, coupon (JSON), orderItems (nested)
model Order {
    id            String        @id @default(cuid())
    total         Float
    status        OrderStatus   @default(ORDER_PLACED)
    userId        String
    storeId       String
    addressId     String
    isPaid        Boolean       @default(false)
    paymentMethod PaymentMethod
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    isCouponUsed  Boolean       @default(false)
    coupon        Json          @default("{}")
    cancelledAt   DateTime?
    refundedAt    DateTime?
    refundAmount  Float?
    refundReason  String?
    razorpayOrderId String?
    razorpayPaymentId String?

    // Shipping fields
    carrierName         String?
    trackingNumber      String?
    awbCode            String?
    shipmentId          String?
    shipmentStatus      String?
    shippedAt           DateTime?
    deliveredAt         DateTime?

    // Razorpay fields
    razorpaySignature   String?

    // Return and replacement fields
    returnRequestedAt   DateTime?
    returnApprovedAt    DateTime?
    returnRejectedAt    DateTime?
    returnReason        String?
    returnTrackingNumber String?
    replacementRequestedAt DateTime?
    replacementApprovedAt DateTime?
    replacementRejectedAt DateTime?
    replacementReason   String?
    replacementOrderId  String?

    orderItems    OrderItem[]
    returnRequests ReturnRequest[]
    refunds        Refund[]
    originalReplacements Replacement[] @relation("OriginalOrder")
    replacementOrders    Replacement[] @relation("ReplacementOrder")

    // Relations
    user    User    @relation("BuyerRelation", fields: [userId], references: [id])
    store   Store   @relation(fields: [storeId], references: [id])
    address Address @relation(fields: [addressId], references: [id])
}

// Required for creating an OrderItem: orderId, productId, quantity, price
model OrderItem {
    orderId   String
    productId String
    quantity  Int
    price     Float

    // Relations
    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id])

    @@id([orderId, productId])
}

// Required for creating a Rating: rating, review, userId, productId
model Rating {
    id        String   @id @default(cuid())
    rating    Int
    review    String
    userId    String
    productId String
    orderId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId, orderId])
}

// Required for creating an Address: userId, name, email, street, city, state, zip, country, phone
model Address {
    id        String   @id @default(cuid())
    userId    String
    name      String
    email     String
    street    String
    city      String
    state     String
    zip       String
    country   String
    phone     String
    createdAt DateTime @default(now())

    // Relations
    Order Order[]
    user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Required for creating a Coupon: code, description, discount, forNewUser, isPublic, expiresAt
model Coupon {
    code        String   @id
    description String
    discount    Float
    forNewUser  Boolean
    forMember   Boolean  @default(false)
    isPublic    Boolean
    expiresAt   DateTime
    createdAt   DateTime @default(now())
}

// Required for creating a Store: userId, name, username, email, contact, logo, description, address (optional: , status, isActive)
model Store {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String
    description String
    username    String   @unique
    address     String
    status      String   @default("pending")
    isActive    Boolean  @default(false)
    logo        String
    email       String
    contact     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Product Product[]
    Order   Order[]
    user    User      @relation(fields: [userId], references: [id])
}

enum ReturnStatus {
    PENDING
    APPROVED
    REJECTED
    PROCESSED
}

model ShippingPolicy {
    id        String   @id @default(cuid())
    title     String
    content   String
    updatedAt DateTime @updatedAt
}

model ReturnRequest {
    id          String       @id @default(cuid())
    orderId     String
    userId      String
    reason      String
    description String?
    images      String[]
    status      ReturnStatus @default(PENDING)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    // Relations
    order Order @relation(fields: [orderId], references: [id])
    user  User  @relation(fields: [userId], references: [id])

    @@unique([orderId, userId])
}

enum RefundStatus {
    PENDING
    PROCESSED
    FAILED
}

model Refund {
    id          String       @id @default(cuid())
    orderId     String
    userId      String
    amount      Float
    reason      String?
    status      RefundStatus @default(PENDING)
    processedAt DateTime?
    razorpayRefundId String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    // Relations
    order Order @relation(fields: [orderId], references: [id])
    user  User  @relation(fields: [userId], references: [id])
}

enum ReplacementStatus {
    PENDING
    APPROVED
    REJECTED
    PROCESSED
}

model Replacement {
    id              String            @id @default(cuid())
    originalOrderId String
    replacementOrderId String?
    userId          String
    reason          String
    description     String?
    images          String[]
    status          ReplacementStatus @default(PENDING)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt

    // Relations
    originalOrder Order @relation("OriginalOrder", fields: [originalOrderId], references: [id])
    replacementOrder Order? @relation("ReplacementOrder", fields: [replacementOrderId], references: [id])
    user User @relation(fields: [userId], references: [id])
}
