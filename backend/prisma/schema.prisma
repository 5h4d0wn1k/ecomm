generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// SQLite compatible schema - using strings instead of enums and arrays

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  passwordHash      String
  role              String   @default("customer")
  firstName         String
  lastName          String
  phone             String?
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLogin         DateTime?
  loginAttempts     Int      @default(0)
  lockoutUntil      DateTime?
  // TOTP 2FA fields
  totpSecret        String?
  totpEnabled       Boolean  @default(false)
  totpBackupCodes   String?  // JSON string for SQLite compatibility
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor        Vendor?
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  wishlists     Wishlist[]
  sessions      Session[]
  notifications Notification[]
  addresses     Address[]
  logs          Log[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Vendor {
  id                  Int                @id @default(autoincrement())
  userId              Int                @unique
  businessName        String
  businessDescription String?
  businessAddress     String
  businessPhone       String?
  taxId               String?
  bankAccountDetails  String?            // JSON string for SQLite compatibility
  commissionRate      Decimal            @default(10.00)
  isVerified          Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[]
  orderItems OrderItem[]
  earnings   VendorEarning[]
  coupons    Coupon[]
  payouts    Payout[]

  @@index([userId])
  @@index([isVerified])
  @@map("vendors")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  slug        String    @unique
  path        String?   // Materialized path (e.g., "/electronics/smartphones")
  level       Int       @default(0) // Depth level in hierarchy
  imageUrl    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  logs     Log[]

  @@index([parentId])
  @@index([slug])
  @@index([isActive])
  @@index([path])
  @@index([level])
  @@index([parentId, sortOrder])
  @@map("categories")
}

model Product {
  id               Int      @id @default(autoincrement())
  vendorId         Int
  categoryId       Int
  name             String
  description      String?
  shortDescription String?
  sku              String    @unique
  price            Decimal
  compareAtPrice   Decimal?
  costPrice        Decimal?
  stockQuantity    Int       @default(0)
  minStockLevel    Int       @default(0)
  weight           Decimal?
  dimensions       String?   // JSON string for SQLite compatibility
  images           String?   // JSON string for SQLite compatibility
  tags             String?   // JSON string for SQLite compatibility
  status           String    @default("active")
  isFeatured       Boolean   @default(false)
  requiresShipping Boolean   @default(true)
  seoTitle         String?
  seoDescription   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  vendor     Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category   Category         @relation(fields: [categoryId], references: [id])
  variants   ProductVariant[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  wishlists  Wishlist[]
  logs       Log[]

  @@index([vendorId])
  @@index([categoryId])
  @@index([sku])
  @@index([status])
  @@index([price])
  @@index([createdAt])
  @@index([vendorId, status])
  @@index([categoryId])
  @@index([isFeatured])
  @@map("products")
}

model ProductVariant {
  id            Int      @id @default(autoincrement())
  productId     Int
  name          String
  value         String
  skuSuffix     String?
  priceModifier Decimal  @default(0)
  stockQuantity Int      @default(0)
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_variants")
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  orderNumber     String        @unique
  status          String        @default("pending")
  subtotal        Decimal
  taxAmount       Decimal       @default(0)
  shippingAmount  Decimal       @default(0)
  discountAmount  Decimal       @default(0)
  totalAmount     Decimal
  currency        String        @default("USD")
  shippingAddress String        // JSON string for SQLite compatibility
  billingAddress  String        // JSON string for SQLite compatibility
  paymentMethod   String?
  paymentStatus   String        @default("pending")
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments   Payment[]
  earnings   VendorEarning[]
  reviews    Review[]
  shipment   Shipment?

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([userId, status])
  @@index([createdAt, status])
  @@map("orders")
}

model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int
  productId       Int
  vendorId        Int
  quantity        Int
  unitPrice       Decimal
  totalPrice      Decimal
  productSnapshot String  // JSON string for SQLite compatibility

  // Relations
  order    Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product  Product         @relation(fields: [productId], references: [id])
  vendor   Vendor          @relation(fields: [vendorId], references: [id])
  earnings VendorEarning[]

  @@index([orderId])
  @@index([productId])
  @@index([vendorId])
  @@map("order_items")
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int
  amount          Decimal
  currency        String        @default("USD")
  paymentMethod   String
  transactionId   String?       @unique
  status          String        @default("pending")
  paymentGateway  String?
  gatewayResponse String?       // JSON string for SQLite compatibility
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([transactionId])
  @@index([status])
  @@map("payments")
}

model VendorEarning {
  id               Int                @id @default(autoincrement())
  vendorId         Int
  orderId          Int
  orderItemId      Int
  grossAmount      Decimal
  commissionAmount Decimal
  netAmount        Decimal
  status           String             @default("pending")
  paidAt           DateTime?
  createdAt        DateTime           @default(now())

  // Relations
  vendor    Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([orderId])
  @@index([status])
  @@map("vendor_earnings")
}

model Coupon {
  id                    Int           @id @default(autoincrement())
  code                  String        @unique
  name                  String
  description           String?
  discountType          String        @default("percentage") // 'percentage' or 'fixed'
  discountValue         Decimal
  maxDiscountAmount     Decimal?
  minOrderAmount        Decimal       @default(0.00)
  usageLimit            Int?
  usageCount            Int           @default(0)
  perUserLimit          Int           @default(1)
  applicableTo          String        @default("all") // 'all', 'categories', 'products'
  vendorId              Int?
  categoryIds           String?       // JSON string for SQLite compatibility
  productIds            String?       // JSON string for SQLite compatibility
  isActive              Boolean       @default(true)
  startsAt              DateTime?
  expiresAt             DateTime
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  vendor                Vendor?       @relation(fields: [vendorId], references: [id])

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@map("coupons")
}

model ShippingZone {
  id        Int      @id @default(autoincrement())
  name      String
  countries String   // JSON string for SQLite compatibility
  states    String   // JSON string for SQLite compatibility
  zipCodes  String   // JSON string for SQLite compatibility
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  rates ShippingRate[]

  @@map("shipping_zones")
}

model ShippingRate {
  id             Int                   @id @default(autoincrement())
  shippingZoneId Int
  name           String
  conditionType  String                // 'weight', 'price', or 'quantity'
  minValue       Decimal?
  maxValue       Decimal?
  rate           Decimal
  isActive       Boolean               @default(true)
  createdAt      DateTime              @default(now())

  // Relations
  shippingZone ShippingZone @relation(fields: [shippingZoneId], references: [id], onDelete: Cascade)

  @@index([shippingZoneId])
  @@map("shipping_rates")
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  orderId    Int?
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@unique([productId, userId, orderId])
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([isApproved])
  @@map("reviews")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id            Int     @id @default(autoincrement())
  cartId        Int
  productId     Int
  variantId     Int?
  quantity      Int
  unitPrice     Decimal
  totalPrice    Decimal
  productSnapshot String? // JSON string for SQLite compatibility

  // Relations
  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
  @@map("cart_items")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlists")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("sessions")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  data      String?  // JSON string for SQLite compatibility
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String   // 'billing' or 'shipping'
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("addresses")
}

model Shipment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  trackingNumber  String?  @unique
  carrier         String?  // 'shiprocket', 'fedex', 'dhl', etc.
  serviceType     String?  // 'standard', 'express', 'overnight'
  status          String   @default("pending") // 'pending', 'shipped', 'in_transit', 'delivered', 'failed'
  shippedAt       DateTime?
  deliveredAt     DateTime?
  estimatedDelivery DateTime?
  weight          Decimal?
  dimensions      String?  // JSON string for SQLite compatibility
  shippingLabel   String?  // URL to shipping label
  cost            Decimal  @default(0)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([trackingNumber])
  @@index([status])
  @@index([carrier])
  @@map("shipments")
}

model Payout {
  id              Int      @id @default(autoincrement())
  vendorId        Int
  amount          Decimal
  currency        String   @default("USD")
  status          String   @default("pending") // 'pending', 'processing', 'completed', 'failed', 'cancelled'
  payoutMethod    String?  // 'bank_transfer', 'paypal', 'stripe'
  referenceId     String?  @unique // External reference (bank transfer ID, PayPal transaction ID)
  description     String?
  processedAt     DateTime?
  completedAt     DateTime?
  failureReason   String?
  metadata        String?  // JSON string for additional data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([status])
  @@index([payoutMethod])
  @@index([referenceId])
  @@map("payouts")
}

model Log {
  id          Int      @id @default(autoincrement())
  level       String   // 'error', 'warn', 'info', 'debug'
  category    String   // 'auth', 'payment', 'order', 'system', 'user_action', etc.
  message     String
  userId      Int?
  orderId     Int?
  productId   Int?
  vendorId    Int?
  ipAddress   String?
  userAgent   String?
  metadata    String?  // JSON string for additional context
  stackTrace  String?
  createdAt   DateTime @default(now())

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  vendor  Vendor?  @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  @@index([level])
  @@index([category])
  @@index([userId])
  @@index([createdAt])
  @@index([level, category])
  @@map("logs")
}